#include<bits/stdc++.h>
#include "DAGOptimizer.h"
#include "Quadruple.h"
#include "QuadrupleTable.h"
using namespace std;

DAGOptimizer::DAGOptimizer(QuadrupleTable *qt, KeywordTable *kt, DelimiterTable *dt, CharConstTable *cct,
            StrConstTable *strct, IntConstTable *ict, FloatConstTable *fct,
            SymbolTable *st) : qt(qt), kt(kt), dt(dt), cct(cct),
        strct(strct), ict(ict), fct(fct), st(st)
{
    buildDAG();
}

void DAGOptimizer::buildDAG()
{
    for (auto it = qt->begin(); it != qt->end(); ++it)
    {
        DAGNode &n1, &n2;
        // Insert new node if needed
        if (vCache.find(it->opr1) == vCache.end())
        {
            // Insert opr1
            DAGNode n;
            n.id = nodes.size();
        }
        if (it->opr1 >= 0)
        {
            if (vCache.find(it->opr1) == vCache.end())
            {
                //
            }
            else if (tCaChe.find(it->opr1) != tCaChe.end())
            {
                //
            }
        }
        if (it->opr2 >= 0)
        {
            //
        }
        switch (it->op)
        {
        case ADD:
        case MUL:
            break;
        case MINUS:
        case DIV:
            break;
        case ASSIGN:

            break;
        }
    }
}

QuadrupleTable DAGOptimizer::optimize()
{
    QuadrupleTable new_qt;
    return new_qt;
}
